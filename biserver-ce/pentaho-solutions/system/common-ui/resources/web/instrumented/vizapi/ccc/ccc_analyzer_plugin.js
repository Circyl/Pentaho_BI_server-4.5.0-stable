/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js']) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'] = [];
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][1] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][3] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][5] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][8] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][16] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][25] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][33] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][43] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][52] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][56] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][57] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][62] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][71] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][73] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][74] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][84] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][85] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][88] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][89] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][90] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][92] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][96] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][99] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][100] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][101] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][104] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][105] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][107] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][111] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][112] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][116] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][119] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][120] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][125] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][130] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][131] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][136] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][139] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][151] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][155] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][156] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][159] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][167] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][173] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][174] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][175] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][176] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][177] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][179] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][181] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][182] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][183] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][186] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][187] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][188] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][189] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][192] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][197] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][198] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][199] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][200] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][202] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][205] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][208] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][212] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][213] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][214] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][217] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][220] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][222] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][224] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][228] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][232] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][236] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][239] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][240] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][241] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][245] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][249] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][250] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][251] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][252] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][253] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][254] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][261] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][276] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][278] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][280] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][282] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][284] = 0;
}
_$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'].source = ["dojo<span class=\"k\">.</span>require<span class=\"k\">(</span><span class=\"s\">\"pentaho.common.Messages\"</span><span class=\"k\">);</span>","","<span class=\"k\">var</span> analyzerPlugins <span class=\"k\">=</span> analyzerPlugins <span class=\"k\">||</span> <span class=\"k\">[];</span>","","analyzerPlugins<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","    init<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span><span class=\"k\">{</span>","","        dojo<span class=\"k\">.</span>declare<span class=\"k\">(</span><span class=\"s\">\"analyzer.CCCVizHelper\"</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             * Indicates if interaction features are enabled.</span>","<span class=\"c\">             * When printing, as in a server eenvironment,</span>","<span class=\"c\">             * interaction features are disabled.</span>","<span class=\"c\">             */</span>","            isInteractionEnabled<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             * Indicates if drilling is enabled.</span>","<span class=\"c\">             * Takes into account whether content-linking is in effect.</span>","<span class=\"c\">             * Only available when interaction is enabled.</span>","<span class=\"c\">             */</span>","            isDrillEnabled<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">!(</span><span class=\"s\">/\\bcl=/</span><span class=\"k\">).</span>test<span class=\"k\">(</span>window<span class=\"k\">.</span>location<span class=\"k\">.</span>href<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             * Returns the label of a given formula.</span>","<span class=\"c\">             * Only available when interaction is enabled.</span>","<span class=\"c\">             */</span>","            getFormulaLabel<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>formula<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> cv<span class=\"k\">.</span>util<span class=\"k\">.</span>parseMDXExpression<span class=\"k\">(</span>formula<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             * Returns an array with all the formulas of the hierarchy to which a given formula belongs.</span>","<span class=\"c\">             * The order of the formulas is from root level to leaf level.</span>","<span class=\"c\">             * Any formula, including a hierarchy id. can be specified in argument 'formula'.</span>","<span class=\"c\">             * Only available when interaction is enabled.</span>","<span class=\"c\">             */</span>","            getHierarchyFormulas<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> cv<span class=\"k\">.</span>getFieldHelp<span class=\"k\">().</span>getHierarchy<span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            ","            <span class=\"c\">/**</span>","<span class=\"c\">             * Returns an array of the FormulaInfo of a given axis.</span>","<span class=\"c\">             * The order of the formulas is significant.</span>","<span class=\"c\">             * Possible axis values are 'row', 'column' and 'measure'.</span>","<span class=\"c\">             */</span>","            getAxisFormulasInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>axis<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> reportDoc <span class=\"k\">=</span> cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>reportDoc<span class=\"k\">,</span>","                    levelElems<span class=\"k\">,</span>","                    isMeasure <span class=\"k\">=</span> <span class=\"k\">(</span>axis <span class=\"k\">===</span> <span class=\"s\">'measure'</span><span class=\"k\">);</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>isMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","                    levelElems <span class=\"k\">=</span> reportDoc<span class=\"k\">.</span>getMetrics<span class=\"k\">();</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">// We care not if an attribute is in the row or col Attributes,</span>","                    <span class=\"c\">// but if it is in the 'rows' or 'columns' gem -</span>","                    <span class=\"c\">// it's what is relevant for charts.</span>","                    levelElems <span class=\"k\">=</span> reportDoc<span class=\"k\">.</span>getReportNode<span class=\"k\">().</span>selectNodes<span class=\"k\">(</span>","                        <span class=\"c\">// Note the axis plural introduction</span>","                        <span class=\"s\">\"cv:columnAttributes/cv:attribute[@gembarId='\"</span> <span class=\"k\">+</span> axis <span class=\"k\">+</span> <span class=\"s\">\"s'] | \"</span> <span class=\"k\">+</span>","                        <span class=\"s\">\"cv:rowAttributes/cv:attribute[@gembarId='\"</span> <span class=\"k\">+</span> axis <span class=\"k\">+</span> <span class=\"s\">\"s']\"</span>","                    <span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// NOTE: levelElems is an Array of elements</span>","","                <span class=\"k\">var</span> formulasInfo <span class=\"k\">=</span> <span class=\"k\">[];</span>","","                dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>levelElems<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>levelElem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> formula <span class=\"k\">=</span> levelElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'formula'</span><span class=\"k\">),</span>","                        gem<span class=\"k\">,</span>","                        id<span class=\"k\">,</span>","                        label<span class=\"k\">,</span>","                        role<span class=\"k\">,</span>","                        hierarchy<span class=\"k\">,</span>","                        formIndex<span class=\"k\">;</span>","","                    <span class=\"c\">// Only formulas that are visible in charts are considered.</span>","                    <span class=\"c\">// Only measures can be hidden in charts.</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>levelElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"hideInChart\"</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'true'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">if</span><span class=\"k\">(</span>isMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> gembarId <span class=\"k\">=</span> levelElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"gembarId\"</span><span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>gembarId <span class=\"k\">||</span>  gembarId <span class=\"k\">===</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">// Unmapped measure</span>","                            <span class=\"k\">return</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                        ","                    <span class=\"k\">if</span><span class=\"k\">(!</span>formula<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">//assert(isMeasure, \"Only measures can not have a formula.\");</span>","","                        id    <span class=\"k\">=</span> levelElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'id'</span><span class=\"k\">);</span>","                        label <span class=\"k\">=</span> getLevelLabel<span class=\"k\">(</span>levelElem<span class=\"k\">);</span>","                        role  <span class=\"k\">=</span> axis<span class=\"k\">;</span>","","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        gem <span class=\"k\">=</span> cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>getGem<span class=\"k\">(</span>formula<span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">// !gem =&gt; assume not placed for chart consumption</span>","                            <span class=\"k\">return</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        <span class=\"c\">// measures have an id != from formula</span>","                        id <span class=\"k\">=</span> gem<span class=\"k\">.</span>getUniqueId<span class=\"k\">();</span>","                        label <span class=\"k\">=</span> gem<span class=\"k\">.</span>getDisplayLabel<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","","                        <span class=\"c\">// \"Roles\" provide more detail for measures</span>","                        <span class=\"c\">// rows, columns, ...custom_role...</span>","                        role <span class=\"k\">=</span> gem<span class=\"k\">.</span>getGembarId<span class=\"k\">();</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>isMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","                        hierarchy <span class=\"k\">=</span> <span class=\"s\">'[Measures]'</span><span class=\"k\">;</span>","                        <span class=\"c\">// For measures the relevant order is the report order...</span>","                        <span class=\"c\">// But note that this index may not be contiguous</span>","                        <span class=\"c\">//  because formula may be hidden.</span>","                        <span class=\"c\">// Below, after sorting, measure indexes are reassigned.</span>","                        formIndex <span class=\"k\">=</span> index<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"c\">// !isMeasure =&gt; has formula =&gt; gem or already excluded</span>","                        <span class=\"c\">//assert(gem, \"Non-measures have gem or were already excluded.\");</span>","","                        <span class=\"k\">var</span> fieldHelp <span class=\"k\">=</span> cv<span class=\"k\">.</span>getFieldHelp<span class=\"k\">();</span>","                        hierarchy <span class=\"k\">=</span> fieldHelp<span class=\"k\">.</span>get<span class=\"k\">(</span>formula<span class=\"k\">,</span> <span class=\"s\">'hierarchy'</span><span class=\"k\">);</span>","","                        <span class=\"c\">// Indexes of non-measure formulas also have to \"fixed\"</span>","                        <span class=\"c\">// because not always they start at 0-gembar-ordinal</span>","                        <span class=\"c\">// due to addition and removal of formulas from gems.</span>","                        formIndex <span class=\"k\">=</span> parseFloat<span class=\"k\">(</span>gem<span class=\"k\">.</span>getGembarOrdinal<span class=\"k\">());</span>","                    <span class=\"k\">}</span>","","                    formulasInfo<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                        id<span class=\"k\">:</span>        id<span class=\"k\">,</span>","                        formula<span class=\"k\">:</span>   formula<span class=\"k\">,</span>","                        label<span class=\"k\">:</span>     label<span class=\"k\">,</span>","                        hierarchy<span class=\"k\">:</span> hierarchy<span class=\"k\">,</span>","                        axis<span class=\"k\">:</span>      axis<span class=\"k\">,</span>","                        role<span class=\"k\">:</span>      role<span class=\"k\">,</span>","                        index<span class=\"k\">:</span>     formIndex","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","","                <span class=\"c\">// Return formulas sorted by index</span>","                formulasInfo<span class=\"k\">.</span>sort<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> a<span class=\"k\">.</span>index <span class=\"k\">-</span> b<span class=\"k\">.</span>index<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","","                ","                <span class=\"c\">// Fix non-contiguous indexes</span>","                dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>formulasInfo<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>formulaInfo<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                    formulaInfo<span class=\"k\">.</span>index <span class=\"k\">=</span> index<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","                <span class=\"k\">return</span> formulasInfo<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             * Performs a click action with the specified context.</span>","<span class=\"c\">             * Only available when interaction is enabled.</span>","<span class=\"c\">             */</span>","            click<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>actionContext<span class=\"k\">,</span> keepGem<span class=\"k\">)</span><span class=\"k\">{</span>","                cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>clickChart<span class=\"k\">(</span>actionContext<span class=\"k\">,</span> keepGem<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">// set visualization options based on analyzer's state.</span>","            <span class=\"c\">// Only available when interaction is enabled.</span>","            generateOptionsFromAnalyzerState<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>report<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> userDefinedOpts <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> chartOptions <span class=\"k\">=</span> report<span class=\"k\">.</span>reportDoc<span class=\"k\">.</span>getChartOptions<span class=\"k\">().</span>attributes<span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> chartOptions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> option <span class=\"k\">=</span> chartOptions<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">var</span> val <span class=\"k\">=</span> option<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","","                    <span class=\"k\">switch</span> <span class=\"k\">(</span>option<span class=\"k\">.</span>nodeName<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">case</span> <span class=\"s\">\"backgroundColor\"</span><span class=\"k\">:</span>","                            userDefinedOpts<span class=\"k\">.</span>extensionPoints <span class=\"k\">=</span> userDefinedOpts<span class=\"k\">.</span>extensionPoints <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                            userDefinedOpts<span class=\"k\">.</span>extensionPoints<span class=\"k\">.</span>base_fillStyle <span class=\"k\">=</span> val<span class=\"k\">;</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","","                        <span class=\"k\">case</span> <span class=\"s\">\"labelColor\"</span><span class=\"k\">:</span>","                            userDefinedOpts<span class=\"k\">.</span>extensionPoints <span class=\"k\">=</span> userDefinedOpts<span class=\"k\">.</span>extensionPoints <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                            userDefinedOpts<span class=\"k\">.</span>extensionPoints<span class=\"k\">.</span>xAxisLabel_textStyle <span class=\"k\">=</span> val<span class=\"k\">;</span>","                            userDefinedOpts<span class=\"k\">.</span>extensionPoints<span class=\"k\">.</span>yAxisLabel_textStyle <span class=\"k\">=</span> val<span class=\"k\">;</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","","                        <span class=\"k\">default</span><span class=\"k\">:</span>","                            userDefinedOpts<span class=\"k\">[</span>option<span class=\"k\">.</span>nodeName<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// build style for pv</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>userDefinedOpts<span class=\"k\">.</span>labelSize<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> style <span class=\"k\">=</span> userDefinedOpts<span class=\"k\">.</span>labelStyle<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>style <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> style <span class=\"k\">==</span> <span class=\"s\">'PLAIN'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        style <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        style <span class=\"k\">+=</span> <span class=\"s\">' '</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    userDefinedOpts<span class=\"k\">.</span>axisLabelFont <span class=\"k\">=</span> style <span class=\"k\">+</span> userDefinedOpts<span class=\"k\">.</span>labelSize <span class=\"k\">+</span> <span class=\"s\">'px '</span> <span class=\"k\">+</span> userDefinedOpts<span class=\"k\">.</span>labelFontFamily<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> userDefinedOpts<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">function</span> getLevelLabel<span class=\"k\">(</span>levelElem<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> labelElem <span class=\"k\">=</span> levelElem<span class=\"k\">.</span>selectSingleNode<span class=\"k\">(</span><span class=\"s\">\"cv:displayLabels/cv:displayLabel\"</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span>labelElem <span class=\"k\">&amp;&amp;</span> labelElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"label\"</span><span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        dojo<span class=\"k\">.</span>declare<span class=\"k\">(</span><span class=\"s\">\"analyzer.CCCVizConfig\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>analyzer<span class=\"k\">.</span>ColorConfiguration<span class=\"k\">],</span> <span class=\"k\">{</span>","","            onModelEvent<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> item<span class=\"k\">,</span> eventName<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>eventName <span class=\"k\">==</span> <span class=\"s\">\"value\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// works by convention where the ids of the data req items match the property names</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">[</span>item<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> args<span class=\"k\">.</span>newVal<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span> <span class=\"c\">// Let super class handle the insertAt and removedGem events</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            _setScalingType<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>scalingType<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">.</span>scalingType <span class=\"k\">=</span> scalingType<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            _setColorRange<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>range<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">.</span>colorRange <span class=\"k\">=</span> range<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            getConfiguration<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> config <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","","                <span class=\"c\">// set current values.</span>","                dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>config<span class=\"k\">.</span>properties<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>item<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">[</span>item<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        item<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">[</span>item<span class=\"k\">.</span>id<span class=\"k\">];</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","                <span class=\"k\">return</span> config<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            updateConfiguration<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">)</span><span class=\"k\">{</span>","              <span class=\"c\">// Reqiured logic, both size and color required by default, turn required off one hen the other is filled.</span>","              <span class=\"k\">var</span> colorBy <span class=\"k\">=</span> config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"color\"</span><span class=\"k\">);</span>","              <span class=\"k\">var</span> sizeBy <span class=\"k\">=</span> config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"size\"</span><span class=\"k\">);</span>","              <span class=\"k\">var</span> totalGems <span class=\"k\">=</span>colorBy<span class=\"k\">.</span>gems<span class=\"k\">.</span>length <span class=\"k\">+</span> sizeBy<span class=\"k\">.</span>gems<span class=\"k\">.</span>length<span class=\"k\">;</span>","              colorBy<span class=\"k\">.</span>required <span class=\"k\">=</span> <span class=\"k\">(</span>totalGems <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">);</span>","              sizeBy<span class=\"k\">.</span>required <span class=\"k\">=</span> <span class=\"k\">(</span>totalGems <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">);</span>","              <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"c\">// ----------------------</span>","        <span class=\"c\">// Register CCC Visualizations</span>","","        <span class=\"k\">var</span> vizIds <span class=\"k\">=</span> <span class=\"k\">[</span>","                    <span class=\"s\">'ccc_heatgrid'</span>","\t\t\t\t\t<span class=\"c\">/*</span>","<span class=\"c\">                    'ccc_bar',</span>","<span class=\"c\">                    'ccc_barstacked',</span>","<span class=\"c\">                    'ccc_barnormalized',</span>","<span class=\"c\">                    'ccc_horzbar',</span>","<span class=\"c\">                    'ccc_horzbarstacked',</span>","<span class=\"c\">                    'ccc_horzbarnormalized',</span>","<span class=\"c\">                    'ccc_line',</span>","<span class=\"c\">                    'ccc_area',</span>","<span class=\"c\">                    'ccc_bulletchart'</span>","<span class=\"c\">                    */</span>","                <span class=\"k\">];</span>","","        <span class=\"k\">var</span> vizHelper <span class=\"k\">=</span> <span class=\"k\">new</span> analyzer<span class=\"k\">.</span>CCCVizHelper<span class=\"k\">();</span>","","        dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>vizIds<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>vizId<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            cv<span class=\"k\">.</span>pentahoVisualizations<span class=\"k\">.</span>push<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>visualizations<span class=\"k\">.</span>getById<span class=\"k\">(</span>vizId<span class=\"k\">));</span>","","            cv<span class=\"k\">.</span>pentahoVisualizationHelpers<span class=\"k\">[</span>vizId<span class=\"k\">]</span> <span class=\"k\">=</span> vizHelper<span class=\"k\">;</span>","","            analyzer<span class=\"k\">.</span>LayoutPanel<span class=\"k\">.</span>configurationManagers<span class=\"k\">[</span><span class=\"s\">'JSON_'</span> <span class=\"k\">+</span> vizId<span class=\"k\">]</span> <span class=\"k\">=</span> analyzer<span class=\"k\">.</span>CCCVizConfig<span class=\"k\">;</span>","            ","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"c\">// end init method</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][1]++;
dojo.require("pentaho.common.Messages");
_$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][3]++;
var analyzerPlugins = (analyzerPlugins || []);
_$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][5]++;
analyzerPlugins.push({init: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][8]++;
  dojo.declare("analyzer.CCCVizHelper", null, {isInteractionEnabled: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][16]++;
  return true;
}), isDrillEnabled: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][25]++;
  return (! /\bcl=/.test(window.location.href));
}), getFormulaLabel: (function (formula) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][33]++;
  return cv.util.parseMDXExpression(formula, false);
}), getHierarchyFormulas: (function (formula, includeHidden, excludeChildren) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][43]++;
  return cv.getFieldHelp().getHierarchy(formula, includeHidden, excludeChildren);
}), getAxisFormulasInfo: (function (axis) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][52]++;
  var reportDoc = cv.getActiveReport().reportDoc, levelElems, isMeasure = (axis === "measure");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][56]++;
  if (isMeasure) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][57]++;
    levelElems = reportDoc.getMetrics();
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][62]++;
    levelElems = reportDoc.getReportNode().selectNodes(("cv:columnAttributes/cv:attribute[@gembarId='" + axis + "s'] | " + "cv:rowAttributes/cv:attribute[@gembarId='" + axis + "s']"));
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][71]++;
  var formulasInfo = [];
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][73]++;
  dojo.forEach(levelElems, (function (levelElem, index) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][74]++;
  var formula = levelElem.getAttribute("formula"), gem, id, label, role, hierarchy, formIndex;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][84]++;
  if ((levelElem.getAttribute("hideInChart") === "true")) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][85]++;
    return;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][88]++;
  if (isMeasure) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][89]++;
    var gembarId = levelElem.getAttribute("gembarId");
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][90]++;
    if (((! gembarId) || (gembarId === "undefined"))) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][92]++;
      return;
    }
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][96]++;
  if ((! formula)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][99]++;
    id = levelElem.getAttribute("id");
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][100]++;
    label = getLevelLabel(levelElem);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][101]++;
    role = axis;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][104]++;
    gem = cv.getActiveReport().getGem(formula);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][105]++;
    if ((! gem)) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][107]++;
      return;
    }
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][111]++;
    id = gem.getUniqueId();
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][112]++;
    label = gem.getDisplayLabel(true);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][116]++;
    role = gem.getGembarId();
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][119]++;
  if (isMeasure) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][120]++;
    hierarchy = "[Measures]";
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][125]++;
    formIndex = index;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][130]++;
    var fieldHelp = cv.getFieldHelp();
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][131]++;
    hierarchy = fieldHelp.get(formula, "hierarchy");
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][136]++;
    formIndex = parseFloat(gem.getGembarOrdinal());
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][139]++;
  formulasInfo.push({id: id, formula: formula, label: label, hierarchy: hierarchy, axis: axis, role: role, index: formIndex});
}));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][151]++;
  formulasInfo.sort((function (a, b) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][151]++;
  return (a.index - b.index);
}));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][155]++;
  dojo.forEach(formulasInfo, (function (formulaInfo, index) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][156]++;
  formulaInfo.index = index;
}), this);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][159]++;
  return formulasInfo;
}), click: (function (actionContext, keepGem) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][167]++;
  cv.getActiveReport().clickChart(actionContext, keepGem);
}), generateOptionsFromAnalyzerState: (function (report) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][173]++;
  var userDefinedOpts = {};
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][174]++;
  var chartOptions = report.reportDoc.getChartOptions().attributes;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][175]++;
  for (var i = 0; (i < chartOptions.length); (i++)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][176]++;
    var option = chartOptions[i];
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][177]++;
    var val = option.nodeValue;
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][179]++;
    switch (option.nodeName) {
    case "backgroundColor":
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][181]++;
      userDefinedOpts.extensionPoints = (userDefinedOpts.extensionPoints || {});
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][182]++;
      userDefinedOpts.extensionPoints.base_fillStyle = val;
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][183]++;
      break;
    case "labelColor":
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][186]++;
      userDefinedOpts.extensionPoints = (userDefinedOpts.extensionPoints || {});
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][187]++;
      userDefinedOpts.extensionPoints.xAxisLabel_textStyle = val;
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][188]++;
      userDefinedOpts.extensionPoints.yAxisLabel_textStyle = val;
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][189]++;
      break;
    default:
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][192]++;
      userDefinedOpts[option.nodeName] = val;
    }
}
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][197]++;
  if (userDefinedOpts.labelSize) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][198]++;
    var style = userDefinedOpts.labelStyle;
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][199]++;
    if (((style == null) || (style == "PLAIN"))) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][200]++;
      style = "";
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][202]++;
      style += " ";
    }
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][205]++;
    userDefinedOpts.axisLabelFont = (style + userDefinedOpts.labelSize + "px " + userDefinedOpts.labelFontFamily);
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][208]++;
  return userDefinedOpts;
})});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][212]++;
  function getLevelLabel(levelElem) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][213]++;
    var labelElem = levelElem.selectSingleNode("cv:displayLabels/cv:displayLabel");
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][214]++;
    return ((labelElem && labelElem.getAttribute("label")) || "");
}
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][217]++;
  dojo.declare("analyzer.CCCVizConfig", [analyzer.ColorConfiguration], {onModelEvent: (function (config, item, eventName, args) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][220]++;
  if ((eventName == "value")) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][222]++;
    this.report.visualization.args[item.id] = args.newVal;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][224]++;
  this.inherited(arguments);
}), _setScalingType: (function (scalingType) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][228]++;
  this.report.visualization.args.scalingType = scalingType;
}), _setColorRange: (function (range) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][232]++;
  this.report.visualization.args.colorRange = range;
}), getConfiguration: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][236]++;
  var config = this.inherited(arguments);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][239]++;
  dojo.forEach(config.properties, (function (item) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][240]++;
  if ((this.report.visualization.args[item.id] !== "undefined")) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][241]++;
    item.value = this.report.visualization.args[item.id];
  }
}), this);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][245]++;
  return config;
}), updateConfiguration: (function (config) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][249]++;
  var colorBy = config.byId("color");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][250]++;
  var sizeBy = config.byId("size");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][251]++;
  var totalGems = (colorBy.gems.length + sizeBy.gems.length);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][252]++;
  colorBy.required = (totalGems == 0);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][253]++;
  sizeBy.required = (totalGems == 0);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][254]++;
  this.inherited(arguments);
})});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][261]++;
  var vizIds = ["ccc_heatgrid"];
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][276]++;
  var vizHelper = new (analyzer.CCCVizHelper)();
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][278]++;
  dojo.forEach(vizIds, (function (vizId) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][280]++;
  cv.pentahoVisualizations.push(pentaho.visualizations.getById(vizId));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][282]++;
  cv.pentahoVisualizationHelpers[vizId] = vizHelper;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][284]++;
  analyzer.LayoutPanel.configurationManagers[("JSON_" + vizId)] = analyzer.CCCVizConfig;
}), this);
})});
